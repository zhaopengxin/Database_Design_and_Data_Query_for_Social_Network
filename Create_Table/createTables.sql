CREATE TABLE PUBLIC_USER_INFORMATION AS (SELECT * FROM keykholt.PUBLIC_USER_INFORMATION);
CREATE TABLE PUBLIC_ARE_FRIENDS AS (SELECT * FROM keykholt.PUBLIC_ARE_FRIENDS);
CREATE TABLE PUBLIC_PHOTO_INFORMATION AS (SELECT * FROM keykholt.PUBLIC_PHOTO_INFORMATION);
CREATE TABLE PUBLIC_TAG_INFORMATION AS (SELECT * FROM keykholt.PUBLIC_TAG_INFORMATION);
CREATE TABLE PUBLIC_EVENT_INFORMATION AS (SELECT * FROM keykholt.PUBLIC_EVENT_INFORMATION);

CREATE TABLE USERS(
USER_ID NUMBER PRIMARY KEY,
FIRST_NAME VARCHAR2(100) NOT NULL,
LAST_NAME VARCHAR2(200) NOT NULL,
YEAR_OF_BIRTH INTEGER,
MONTH_OF_BIRTH INTEGER,
DAY_OF_BIRTH INTEGER,
GENDER VARCHAR2(100)
);

--THIS IS RELATIONSHIP
CREATE TABLE FRIENDS(
USER1_ID NUMBER,
USER2_ID NUMBER,
FOREIGN KEY (USER1_ID) REFERENCES USERS ON DELETE CASCADE,
FOREIGN KEY (USER2_ID) REFERENCES USERS ON DELETE CASCADE
);

CREATE TABLE CITIES(
CITY_ID NUMBER PRIMARY KEY,
CITY_NAME VARCHAR2(100),
STATE_NAME VARCHAR2(100),
COUNTRY_NAME VARCHAR2(100)
);

--THIS IS RELATIONSHIP
CREATE TABLE USER_CURRENT_CITY(
USER_ID NUMBER,
CURRENT_CITY_ID NUMBER,
FOREIGN KEY (USER_ID) REFERENCES USERS ON DELETE CASCADE,
FOREIGN KEY (CURRENT_CITY_ID) REFERENCES CITIES (CITY_ID) ON DELETE CASCADE
);

--THIS IS RELATIONSHIP
CREATE TABLE USER_HOMETOWN_CITY(
USER_ID NUMBER,
HOMETOWN_CITY_ID NUMBER,
FOREIGN KEY (USER_ID) REFERENCES USERS ON DELETE CASCADE,
FOREIGN KEY (HOMETOWN_CITY_ID) REFERENCES CITIES (CITY_ID) ON DELETE CASCADE
);

CREATE TABLE PROGRAMS(
PROGRAM_ID NUMBER PRIMARY KEY,
INSTITUTION VARCHAR2(100),
CONCENTRATION VARCHAR2(100),
DEGREE VARCHAR2(100)
);

--THIS IS RELATIONSHIP
CREATE TABLE EDUCATION(
USER_ID NUMBER,
PROGRAM_ID INTEGER,
PROGRAM_YEAR INTEGER,
FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAMS ON DELETE CASCADE,
FOREIGN KEY (USER_ID) REFERENCES USERS ON DELETE CASCADE
);

CREATE TABLE MESSAGE(
SENDER_ID NUMBER,
RECEIVER_ID NUMBER,
MESSAGE_CONTENT VARCHAR2(2000),
SENT_TIME TIMESTAMP,
PRIMARY KEY (SENDER_ID,RECEIVER_ID,SENT_TIME),
FOREIGN KEY (SENDER_ID) REFERENCES USERS ON DELETE CASCADE,
FOREIGN KEY (RECEIVER_ID) REFERENCES USERS ON DELETE CASCADE
);

CREATE TABLE USER_EVENTS(
EVENT_ID NUMBER PRIMARY KEY,
EVENT_CREATOR_ID NUMBER,
EVENT_NAME VARCHAR2(100),
EVENT_TAGLINE VARCHAR2(100),
EVENT_DESCRIPTION VARCHAR2(100),
EVENT_HOST VARCHAR2(100),
EVENT_TYPE VARCHAR2(100),
EVENT_SUBTYPE VARCHAR2(100),
EVENT_LOCATION VARCHAR2(100),
EVENT_CITY_ID INTEGER,
EVENT_START_TIME TIMESTAMP,
EVENT_END_TIME TIMESTAMP,
FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE,
FOREIGN KEY (EVENT_CITY_ID) REFERENCES CITIES (CITY_ID) ON DELETE CASCADE 
);

--THIS IS RELATIONSHIP
CREATE TABLE PARTICIPANTS(
EVENT_ID NUMBER,
USER_ID NUMBER,
CONFIRMATION VARCHAR2(100),
FOREIGN KEY (EVENT_ID) REFERENCES USER_EVENTS ON DELETE CASCADE,
FOREIGN KEY (USER_ID) REFERENCES USERS ON DELETE CASCADE,
CONSTRAINT CHECK_CONFIRMATION
CHECK (CONFIRMATION IN ('ATTENDING','DECLINED','UNSURE','NOT-REPLIED'))
);


CREATE TABLE ALBUMS(
ALBUM_ID VARCHAR2(100) PRIMARY KEY,
ALBUM_OWNER_ID NUMBER,
ALBUM_NAME VARCHAR2(100), 
ALBUM_CREATED_TIME TIMESTAMP, 
ALBUM_MODIFIED_TIME TIMESTAMP, 
ALBUM_LINK VARCHAR2(2000), 
ALBUM_VISIBILITY 
VARCHAR2(100), 
COVER_PHOTO_ID VARCHAR2(100),
FOREIGN KEY (ALBUM_OWNER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE,
CONSTRAINT CHECK_ALBUM_VISIBILITY
CHECK (ALBUM_VISIBILITY IN ('MYSELF','FRIENDS','FRIENDS_OF_FRIENDS','EVERYONE','CUSTOM'))
);

CREATE TABLE PHOTOS(
PHOTO_ID VARCHAR2(100) PRIMARY KEY,
ALBUM_ID VARCHAR2(100), 
PHOTO_CAPTION VARCHAR2(2000), 
PHOTO_CREATED_TIME TIMESTAMP, 
PHOTO_MODIFIED_TIME TIMESTAMP, 
PHOTO_LINK VARCHAR2(2000),
FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS ON DELETE CASCADE
); 

CREATE TABLE TAGS(
TAG_PHOTO_ID VARCHAR2(100),
TAG_SUBJECT_ID NUMBER, 
TAG_CREATED_TIME TIMESTAMP, 
TAG_X NUMBER, 
TAG_Y NUMBER, 
PRIMARY KEY (TAG_PHOTO_ID, TAG_SUBJECT_ID)
);


