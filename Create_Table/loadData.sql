INSERT INTO USERS(USER_ID, FIRST_NAME, LAST_NAME, YEAR_OF_BIRHT, MONTH_OF_BIRTH, DAY_OF_BIRTH, GENGER) 
SELECT DISTINCT USER_ID, FIRST_NAME, LAST_NAME, YEAR_OF_BIRHT, MONTH_OF_BIRTH, DAY_OF_BIRTH, GENGER FROM PUBLIC_USER_INFORMATION;

INSERT INTO FRIENDS(USER1_ID, USER2_ID) SELECT DISTINCT USER1_ID, USER2_ID FROM 
(SELECT USER1_ID, USER2_ID FROM PUBLIC_ARE_FRIENDS(USER1_ID, USER2_ID) UNION SELECT USER1_ID, USER2_ID FROM PUBLIC_ARE_FRIENDS(USER2_ID, USER1_ID)) WHERE USER1_ID<USER2_ID;

CREATE TRIGGER FRIENDS_TRIGGER
BEFORE INSERT ON FRINTDS
FOR EACH ROW
BEGIN
WHEN

CREATE TRIGGER FRIENDS_TRIGGER 
BEFORE INSERT ON FRIENDS
FOR EACH ROW
BEGIN
IF (:OLD.USER1_ID = :NEW.USER1_ID AND :OLD.USER2_ID = :NEW.USER2_ID) OR (:OLD.USER1_ID = :NEW.USER2_ID AND :OLD.USER2_ID = :NEW.USER1_ID) THEN 
	RAISE_APPLICATION_ERROR(-20000,'DATA IS DUPLICATED,NO INSERT');
END IF;
END;
.
RUN;



CREATE SEQUENCE CITIES_SEQUENCE START WITH 1 INCREMENT BY 1;

CREATE TRIGGER CITIES_TRIGGER 
BEFORE INSERT ON CITIES 
FOR EACH ROW
BEGIN
SELECT CITIES_SEQUENCE.NEXTVAL INTO :NEW.CITY_ID FROM DUAL;
END;
.
RUN;

INSERT INTO CITIES(CITY_ID, CITY_NAME, STATE_NAME, COUNTRY_NAME) 
SELECT DISTINCT CITY_NAME, COUNTRY_NAME FROM (SELECT CITY_NAME, COUNTRY_NAME FROM PUBLIC_USER_INFORMATION(HOMETOWN_CITY, HOMETOWN_COUNT 
UNION SELECT CITY_NAME, COUNTRY_NAME FROM PUBLIC_USER_INFORMATION(CURRENT_CITY, CURRENT_COUNTRY));

INSERT INTO USER_CURRENT_CITY(USER_ID, CURRENT_CITY_ID)
SELECT DISTINCT USER_ID, CITY_ID FROM PUBLIC_USER_INFORMATION CU, CITIES CC WHERE CU.CURRENT_CITY = CC.CITY_NAME;

INSERT INTO USER_HOMETOWN_CITY(USER_ID, HOMETOWN_CITY_ID)
SELECT DISTINCT USER_ID, CITY_ID FROM PUBLIC_USER_INFORMATION HU, CITIES HC WHERE HU.HOMETOWN_CITY = HC.CITY_NAME;

--INSERT INTO MESSAGE(SENDER_ID, RECEIVER_ID, MESSAGE_CONTENT, SENT_TIME) SELECT DISTINCT 

CREATE SEQUENCE PROGRAM_SEQUENCE START WITH 1 INCREMENT BY 1;

CREATE TRIGGER PROGRAM_TRIGGER 
BEFORE INSERT ON PROGRAMS 
FOR EACH ROW
BEGIN
SELECT PROGRAM_SEQUENCE.NEXTVAL INTO :NEW.PROGRAM_ID FROM DUAL;
END;
.
RUN;

INSERT INTO PROGRAMS(INSTITUTION, CONCENTRATION, DEGREE) SELECT DISTINCT INSTITUTION_NAME, PROGRAM_CONCENTRATION, PROGRAM_DEGREE FROM PUBLIC_USER_INFORMATION;

INSERT INTO EDUCATION(USER_ID, PROGRAM_ID, PROGRAM_YEAR) SELECT DISTINCT USER_ID, PROGRAM_ID, PROGRAM_YEAR FROM PUBLIC_USER_INFORMATION EPU, PROGRAMS EP, PUBLIC_USER_INFORMATION EPU
WHERE EPU.INSTITUTION_NAME = EP.INSTITUTION AND EPU.PROGRAM_CONCENTRATION = EP.CONCENTRATION AND EPU.PROGRAM_DEGREE = EP.DEGREE;

INSERT INTO USER_EVENTS(EVENT_ID, EVENT_CREATOR_ID, EVENT_NAME, EVENT_TAGLINE, EVENT_DESCRIPTION, EVENT_HOST, EVENT_TPYE, EVENT_SUBTYPE, EVENT_LOCATION, EVENT_CITY_ID, EVENT_START_TIME, EVENT_END_TIME) 
SELECT DISTINCT EVENT_ID, EVENT_CREATOR_ID, EVENT_NAME, EVENT_TAGLINE, EVENT_DESCRIPTION, EVENT_HOST, EVENT_TPYE, EVENT_SUBTYPE, EVENT_LOCATION, EVENT_CITY_ID, EVENT_START_TIME, EVENT_END_TIME FROM PUBLIC_EVENT_INFORMATION;

--INSERT INTO PARTICIPANTS SELECT DISTINCT EVENT_ID, USER_ID, CONFIRMATION FROM 

INSERT INTO ALBUMS(ALBUM_ID, ALBUM_OWNER_ID, ALBUM_NAME, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY, COVER_PHOTO_ID) 
SELECT DISTINCT ALBUN_ID, OWNER_ID, ALBUM_NAME, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY, COVER_PHOTO_ID FROM PUBLIC_PHOTO_INFORMATION;

INSERT INTO PHOTOS(PHOTO_ID, ALBUN_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME, PHOTO_LINK) 
SELECT DISTINCT PHOTO_ID, ALBUN_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME, PHOTO_LINK FROM PUBLIC_PHOTO_INFORMATION;

INSERT INTO TAGES(TAG_PHOTO_ID, TAG_SUBJECT_ID, TAG_CREATED_TIME, TAG_X, TAG_Y) 
SELECT DISTINCT PHOTO_ID, TAG_SUBJECT_ID, TAG_CREATED_TIME, TAG_X_COORDINATE, TAG_Y_COORDINATE FROM PUBLIC_TAG_INFORMATION;

